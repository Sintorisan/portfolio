[
  {
    "id": "1",
    "title": "Building things, just with a keyboard now",
    "date": "2025-05-23",
    "blogContent": "First of all, hello and welcome to my personal website (or whatever this is)!\n\nWho am I, you might wonder? Well, I’m Sindri, and as of today (23rd of May), I’m officially a junior .NET developer. I’ve spent the last two years studying to become a developer after switching paths from carpentry, which I did for 13 years. Why the change? Even though I loved carpentry, it started to feel like I was stuck on repeat. Everything was local, I never really left the town I lived in and honestly, I didn’t have much reason to. But eventually, I hit a wall. I needed something new, new surroundings, a fresh challenge, a different kind of everyday life. Becoming a developer felt like a natural choice. I’ve always been drawn to STEM-related stuff, and most of the content I consume online is about tech. Plus, I’ve always enjoyed building things, whether it’s a house, a piece of furniture or a program, so this felt like a great fit.\n\nThat’s a little intro about me and why this site exists. So, what’s the plan here? This will be my portfolio, but I also want to blog about my progress, updates on this site, other projects I’m working on, and maybe even some thoughts or reflections here and there. Sort of a mix between a dev blog and a personal diary.\n\nSo, what have I done so far? Not much yet, as you can probably tell. Just spun up the solution, wrote this post, and published the site. I’m building it with Next.js. Sure, as a .NET developer I could’ve gone with Blazor, but I wanted to push myself a bit. I have a basic understanding of TypeScript and React, and now that I’m feeling pretty confident with C#, I figured it’s time to sharpen those other tools. And what better way to do that than by building something for myself?\n\nThat’s all for now. Honestly, this whole thing was a pretty spontaneous decision, no detailed plan, just a loose mental image of how I want the site to look and feel. The idea is to make it resemble an API testing UI, where each page is kind of like an endpoint and the content changes based on the “URL.” If that sounds a bit confusing, I don’t blame you. But hey, we’ll see where it goes. Hopefully, I can stick to the vision and bring it to life."
  },
  {
    "id": "2",
    "title": "React feels cosy... And I kinda like it",
    "date": "2025-05-31",
    "blogContent": "A new week, a new blog. So, what have I been up to? As you can see, I’ve updated the site to get more of that API testing vibe going on. I’ve taken a lot of inspiration from Scalar UI. I think this might be the final look for the site, though I might tweak the color scheme a bit, just so it doesn’t look too much like Scalar. But this is pretty much the vision I had from the beginning, and now that the structure is in place... it kind of feels empty. I’m not really sure what more I can do to “pimp it up” and make it feel more welcoming. Then again, I’m not a designer, I’m primarily a backend developer and that’s exactly what I’m trying to reflect with this portfolio.\n\nAs I mentioned in the last post, I’m building this site using Next.js with TypeScript to expand my knowledge. I haven’t worked much with JS/TS and React outside of school projects, but it’s really starting to grow on me. I love C#, it’ll always be my main and most comfortable language (for now) mainly because of its structure and readability. But that’s from a backend perspective. I haven’t touched much backend stuff with TypeScript on this site yet, but I plan to later, when I hook it up to a database for the blog posts. It’s nothing fancy, but I’m hoping I’ll learn something from it. Right now, I’m just storing the blog posts in a JSON file in the public folder and mocking an API call to fetch them.\n\nUsing TypeScript and React for the frontend, I’d even say it might be better than Blazor in some ways. I’m not as comfortable with it yet, but once I get more used to it, I can definitely see myself preferring React over Blazor for frontend work. Why? Well, first of all, the development speed is way faster. Seeing changes live without having to cross my fingers and wait for hot reload (if it even works) is such a relief. It’s super annoying to go through that whole cycle just to tweak a padding or margin. Second, it just feels refreshing to code in a different language and work in VS Code, it adds a bit of spice to my existence. So, my verdict so far is that React with TypeScript is a strong contender for the frontend title, but C# is still the reigning champ on the backend. We’ll see what happens once I start doing backend work in TypeScript too.\n\nBefore I go into what I’ve actually built, I want to talk a bit about how I learn. So let’s address the elephant in the room, yes, I use ChatGPT as a guide. In this fast paced dev world, I want to soak up as much knowledge as I can in the time I have, rather than spending hours Googling how to do basic stuff and I don’t want use Copilot while I’m learning. I really want to learn how to build things myself, not just let something else build it for me. I have a big interest in building stuff, and the enjoyment of the final result just feels more… well, enjoyable when I know it’s the fruit of my own labor. That said, I don’t want full solutions handed to me. I don’t want Mr. Gipiti to write entire components, I ask for general guidelines, base structure, and best practices. I try to keep the copy-paste to a minimum, so it becomes a kind of muscle memory while I learn.\n\nNow, onto what I’ve actually built and learned so far. First off, I have to say that writing down the base structure before jumping in is incredibly helpful. Having a clear destination makes the process easier. It’s never a perfect plan, but it gives me direction and allows me to make adjustments along the way. So with that mindset, I started sketching out how I wanted the components to work: one main section component that holds different endpoint components, which are the accordions displaying JSON structures and those JSON structures are components too.\n\nThen came the planning phase for how the JSON should be structured and what to show. Once that was set, it was finally time to build. Sure, I could’ve just stringified the JSON and displayed it—but that didn’t give me the control I wanted. I wanted to do things like turning image URLs into modals and giving values different colors based on their data type. So I built the structure myself. And honestly? It was kind of fun. Super satisfying to see it come together.\n\nBut then I thought, what about people who aren’t used to reading JSON? They should be able to read the content too. So, I added a “Normalize” button that switches the JSON view into plain text. The biggest challenge, though, was building the modal and passing values up the component tree. That took a bit of head-scratching, but I got there in the end.\n\nThere’s still a bunch I want to explore and improve, but I’m happy with the direction so far. It’s starting to feel like something that actually reflects both who I am and what I can do. I’ll keep building, learning, and sharing the process as I go.\n\nThat’s all from me today, thanks for stopping by, and see you in the next post!"
  }
]
